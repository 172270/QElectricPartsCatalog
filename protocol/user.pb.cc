// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "user.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace user {

void protobuf_ShutdownFile_user_2eproto() {
  delete LoginRequest::default_instance_;
  delete LoginResponse::default_instance_;
  delete Add::default_instance_;
  delete AddReplay::default_instance_;
  delete UserBasicInformation::default_instance_;
  delete UserData::default_instance_;
  delete UserActivityStatistics::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_user_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_user_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::storage::protobuf_AddDesc_storage_2eproto();
  ::protobuf_AddDesc_stats_2eproto();
  LoginRequest::default_instance_ = new LoginRequest();
  LoginResponse::default_instance_ = new LoginResponse();
  Add::default_instance_ = new Add();
  AddReplay::default_instance_ = new AddReplay();
  UserBasicInformation::default_instance_ = new UserBasicInformation();
  UserData::default_instance_ = new UserData();
  UserActivityStatistics::default_instance_ = new UserActivityStatistics();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  LoginResponse::default_instance_->InitAsDefaultInstance();
  Add::default_instance_->InitAsDefaultInstance();
  AddReplay::default_instance_->InitAsDefaultInstance();
  UserBasicInformation::default_instance_->InitAsDefaultInstance();
  UserData::default_instance_->InitAsDefaultInstance();
  UserActivityStatistics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_user_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_user_2eproto_once_);
void protobuf_AddDesc_user_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_user_2eproto_once_,
                 &protobuf_AddDesc_user_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_user_2eproto {
  StaticDescriptorInitializer_user_2eproto() {
    protobuf_AddDesc_user_2eproto();
  }
} static_descriptor_initializer_user_2eproto_;
#endif
bool Replay_IsValid(int value) {
  switch(value) {
    case 1:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRequest::kNameFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginRequest& LoginRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // required string password = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->password(), output);
  }

}

int LoginRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginRequest*>(&from));
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginRequest::GetTypeName() const {
  return "user.LoginRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int LoginResponse::kMsgTypeFieldNumber;
const int LoginResponse::kReplayFieldNumber;
#endif  // !_MSC_VER

LoginResponse::LoginResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LoginResponse::InitAsDefaultInstance() {
}

LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LoginResponse::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 14u;
  replay_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginResponse::~LoginResponse() {
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginResponse& LoginResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

LoginResponse* LoginResponse::default_instance_ = NULL;

LoginResponse* LoginResponse::New() const {
  return new LoginResponse;
}

void LoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgtype_ = 14u;
    replay_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 msgType = 1 [default = 14];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_replay;
        break;
      }

      // required .user.Replay replay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replay:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user::Replay_IsValid(value)) {
            set_replay(static_cast< ::user::Replay >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 msgType = 1 [default = 14];
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgtype(), output);
  }

  // required .user.Replay replay = 2;
  if (has_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->replay(), output);
  }

}

int LoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 msgType = 1 [default = 14];
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtype());
    }

    // required .user.Replay replay = 2;
    if (has_replay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->replay());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginResponse*>(&from));
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_replay()) {
      set_replay(from.replay());
    }
  }
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(replay_, other->replay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginResponse::GetTypeName() const {
  return "user.LoginResponse";
}


// ===================================================================

#ifndef _MSC_VER
const int Add::kNameFieldNumber;
const int Add::kPasswordFieldNumber;
const int Add::kEmailFieldNumber;
const int Add::kAddressFieldNumber;
const int Add::kPhonenumberFieldNumber;
#endif  // !_MSC_VER

Add::Add()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Add::InitAsDefaultInstance() {
}

Add::Add(const Add& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Add::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Add::~Add() {
  SharedDtor();
}

void Add::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenumber_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Add::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Add& Add::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

Add* Add::default_instance_ = NULL;

Add* Add::New() const {
  return new Add;
}

void Add::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_phonenumber()) {
      if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
        phonenumber_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Add::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_email;
        break;
      }

      // required string email = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_address;
        break;
      }

      // optional string address = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_phonenumber;
        break;
      }

      // optional bytes phonenumber = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phonenumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phonenumber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Add::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // required string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->email(), output);
  }

  // optional string address = 5;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->address(), output);
  }

  // optional bytes phonenumber = 8;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->phonenumber(), output);
  }

}

int Add::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required string email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string address = 5;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional bytes phonenumber = 8;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phonenumber());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Add::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Add*>(&from));
}

void Add::MergeFrom(const Add& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
  }
}

void Add::CopyFrom(const Add& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Add::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Add::Swap(Add* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(password_, other->password_);
    std::swap(email_, other->email_);
    std::swap(address_, other->address_);
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Add::GetTypeName() const {
  return "user.Add";
}


// ===================================================================

#ifndef _MSC_VER
const int AddReplay::kStatsFieldNumber;
const int AddReplay::kReplayFieldNumber;
#endif  // !_MSC_VER

AddReplay::AddReplay()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AddReplay::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stats_ = const_cast< ::QueryStats*>(
      ::QueryStats::internal_default_instance());
#else
  stats_ = const_cast< ::QueryStats*>(&::QueryStats::default_instance());
#endif
}

AddReplay::AddReplay(const AddReplay& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AddReplay::SharedCtor() {
  _cached_size_ = 0;
  stats_ = NULL;
  replay_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddReplay::~AddReplay() {
  SharedDtor();
}

void AddReplay::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete stats_;
  }
}

void AddReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AddReplay& AddReplay::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

AddReplay* AddReplay::default_instance_ = NULL;

AddReplay* AddReplay::New() const {
  return new AddReplay;
}

void AddReplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stats()) {
      if (stats_ != NULL) stats_->::QueryStats::Clear();
    }
    replay_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AddReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QueryStats stats = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_replay;
        break;
      }

      // required .user.Replay replay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_replay:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::user::Replay_IsValid(value)) {
            set_replay(static_cast< ::user::Replay >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QueryStats stats = 2;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->stats(), output);
  }

  // required .user.Replay replay = 3;
  if (has_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->replay(), output);
  }

}

int AddReplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QueryStats stats = 2;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

    // required .user.Replay replay = 3;
    if (has_replay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->replay());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddReplay::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AddReplay*>(&from));
}

void AddReplay::MergeFrom(const AddReplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats()) {
      mutable_stats()->::QueryStats::MergeFrom(from.stats());
    }
    if (from.has_replay()) {
      set_replay(from.replay());
    }
  }
}

void AddReplay::CopyFrom(const AddReplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddReplay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_stats()) {
    if (!this->stats().IsInitialized()) return false;
  }
  return true;
}

void AddReplay::Swap(AddReplay* other) {
  if (other != this) {
    std::swap(stats_, other->stats_);
    std::swap(replay_, other->replay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AddReplay::GetTypeName() const {
  return "user.AddReplay";
}


// ===================================================================

#ifndef _MSC_VER
const int UserBasicInformation::kNameFieldNumber;
const int UserBasicInformation::kEmailFieldNumber;
const int UserBasicInformation::kAddressFieldNumber;
#endif  // !_MSC_VER

UserBasicInformation::UserBasicInformation()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserBasicInformation::InitAsDefaultInstance() {
}

UserBasicInformation::UserBasicInformation(const UserBasicInformation& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserBasicInformation::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBasicInformation::~UserBasicInformation() {
  SharedDtor();
}

void UserBasicInformation::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserBasicInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserBasicInformation& UserBasicInformation::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserBasicInformation* UserBasicInformation::default_instance_ = NULL;

UserBasicInformation* UserBasicInformation::New() const {
  return new UserBasicInformation;
}

void UserBasicInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserBasicInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_email;
        break;
      }

      // optional string email = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_address;
        break;
      }

      // optional string address = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserBasicInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->email(), output);
  }

  // optional string address = 5;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->address(), output);
  }

}

int UserBasicInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string address = 5;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBasicInformation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserBasicInformation*>(&from));
}

void UserBasicInformation::MergeFrom(const UserBasicInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
}

void UserBasicInformation::CopyFrom(const UserBasicInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBasicInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserBasicInformation::Swap(UserBasicInformation* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(email_, other->email_);
    std::swap(address_, other->address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserBasicInformation::GetTypeName() const {
  return "user.UserBasicInformation";
}


// ===================================================================

#ifndef _MSC_VER
const int UserData::kIDFieldNumber;
const int UserData::kNameFieldNumber;
const int UserData::kEmailFieldNumber;
const int UserData::kStoragesFieldNumber;
const int UserData::kAddressFieldNumber;
const int UserData::kPhoneNumberFieldNumber;
const int UserData::kLastLoginFieldNumber;
const int UserData::kRegistrationdateFieldNumber;
const int UserData::kConfigFieldNumber;
const int UserData::kStatsFieldNumber;
const int UserData::kDescriptionFieldNumber;
#endif  // !_MSC_VER

UserData::UserData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserData::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  stats_ = const_cast< ::user::UserActivityStatistics*>(
      ::user::UserActivityStatistics::internal_default_instance());
#else
  stats_ = const_cast< ::user::UserActivityStatistics*>(&::user::UserActivityStatistics::default_instance());
#endif
}

UserData::UserData(const UserData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phonenumber_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastlogin_ = GOOGLE_ULONGLONG(0);
  registrationdate_ = GOOGLE_ULONGLONG(0);
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stats_ = NULL;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserData::~UserData() {
  SharedDtor();
}

void UserData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
    delete phonenumber_;
  }
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete stats_;
  }
}

void UserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserData& UserData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserData* UserData::default_instance_ = NULL;

UserData* UserData::New() const {
  return new UserData;
}

void UserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    if (has_phonenumber()) {
      if (phonenumber_ != &::google::protobuf::internal::kEmptyString) {
        phonenumber_->clear();
      }
    }
    lastlogin_ = GOOGLE_ULONGLONG(0);
    registrationdate_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::kEmptyString) {
        config_->clear();
      }
    }
    if (has_stats()) {
      if (stats_ != NULL) stats_->::user::UserActivityStatistics::Clear();
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  storages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_email;
        break;
      }

      // required string email = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_address;
        break;
      }

      // optional string address = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_phoneNumber;
        break;
      }

      // optional bytes phoneNumber = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phoneNumber:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_phonenumber()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastLogin;
        break;
      }

      // optional uint64 lastLogin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastlogin_)));
          set_has_lastlogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_registrationdate;
        break;
      }

      // optional uint64 registrationdate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_registrationdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &registrationdate_)));
          set_has_registrationdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_config;
        break;
      }

      // optional bytes config = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_stats;
        break;
      }

      // optional .user.UserActivityStatistics stats = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_storages;
        break;
      }

      // repeated .storage.Storage storages = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_storages;
        if (input->ExpectTag(98)) goto parse_description;
        break;
      }

      // optional bytes description = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_description()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->email(), output);
  }

  // optional string address = 5;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->address(), output);
  }

  // optional bytes phoneNumber = 6;
  if (has_phonenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->phonenumber(), output);
  }

  // optional uint64 lastLogin = 7;
  if (has_lastlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->lastlogin(), output);
  }

  // optional uint64 registrationdate = 8;
  if (has_registrationdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->registrationdate(), output);
  }

  // optional bytes config = 9;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->config(), output);
  }

  // optional .user.UserActivityStatistics stats = 10;
  if (has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->stats(), output);
  }

  // repeated .storage.Storage storages = 11;
  for (int i = 0; i < this->storages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->storages(i), output);
  }

  // optional bytes description = 12;
  if (has_description()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->description(), output);
  }

}

int UserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional string address = 5;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional bytes phoneNumber = 6;
    if (has_phonenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->phonenumber());
    }

    // optional uint64 lastLogin = 7;
    if (has_lastlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastlogin());
    }

    // optional uint64 registrationdate = 8;
    if (has_registrationdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->registrationdate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes config = 9;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->config());
    }

    // optional .user.UserActivityStatistics stats = 10;
    if (has_stats()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats());
    }

    // optional bytes description = 12;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->description());
    }

  }
  // repeated .storage.Storage storages = 11;
  total_size += 1 * this->storages_size();
  for (int i = 0; i < this->storages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storages(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserData*>(&from));
}

void UserData::MergeFrom(const UserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  storages_.MergeFrom(from.storages_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_phonenumber()) {
      set_phonenumber(from.phonenumber());
    }
    if (from.has_lastlogin()) {
      set_lastlogin(from.lastlogin());
    }
    if (from.has_registrationdate()) {
      set_registrationdate(from.registrationdate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_stats()) {
      mutable_stats()->::user::UserActivityStatistics::MergeFrom(from.stats());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
}

void UserData::CopyFrom(const UserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < storages_size(); i++) {
    if (!this->storages(i).IsInitialized()) return false;
  }
  if (has_stats()) {
    if (!this->stats().IsInitialized()) return false;
  }
  return true;
}

void UserData::Swap(UserData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(email_, other->email_);
    storages_.Swap(&other->storages_);
    std::swap(address_, other->address_);
    std::swap(phonenumber_, other->phonenumber_);
    std::swap(lastlogin_, other->lastlogin_);
    std::swap(registrationdate_, other->registrationdate_);
    std::swap(config_, other->config_);
    std::swap(stats_, other->stats_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserData::GetTypeName() const {
  return "user.UserData";
}


// ===================================================================

#ifndef _MSC_VER
const int UserActivityStatistics::kMagazineCountFieldNumber;
const int UserActivityStatistics::kTotalNumOfElementsFieldNumber;
const int UserActivityStatistics::kTotalNumOfUniqueElementsFieldNumber;
const int UserActivityStatistics::kTotalNumOfRequestsFieldNumber;
const int UserActivityStatistics::kTotalModifiedItemsFieldNumber;
const int UserActivityStatistics::kTotalAddItemsFieldNumber;
#endif  // !_MSC_VER

UserActivityStatistics::UserActivityStatistics()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UserActivityStatistics::InitAsDefaultInstance() {
}

UserActivityStatistics::UserActivityStatistics(const UserActivityStatistics& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UserActivityStatistics::SharedCtor() {
  _cached_size_ = 0;
  magazinecount_ = 0u;
  totalnumofelements_ = 0u;
  totalnumofuniqueelements_ = 0u;
  totalnumofrequests_ = 0u;
  totalmodifieditems_ = 0u;
  totaladditems_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserActivityStatistics::~UserActivityStatistics() {
  SharedDtor();
}

void UserActivityStatistics::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UserActivityStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserActivityStatistics& UserActivityStatistics::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_user_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_user_2eproto();
#endif
  return *default_instance_;
}

UserActivityStatistics* UserActivityStatistics::default_instance_ = NULL;

UserActivityStatistics* UserActivityStatistics::New() const {
  return new UserActivityStatistics;
}

void UserActivityStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    magazinecount_ = 0u;
    totalnumofelements_ = 0u;
    totalnumofuniqueelements_ = 0u;
    totalnumofrequests_ = 0u;
    totalmodifieditems_ = 0u;
    totaladditems_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UserActivityStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 magazineCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magazinecount_)));
          set_has_magazinecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalNumOfElements;
        break;
      }

      // required uint32 totalNumOfElements = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalNumOfElements:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalnumofelements_)));
          set_has_totalnumofelements();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totalNumOfUniqueElements;
        break;
      }

      // required uint32 totalNumOfUniqueElements = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalNumOfUniqueElements:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalnumofuniqueelements_)));
          set_has_totalnumofuniqueelements();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_totalNumOfRequests;
        break;
      }

      // required uint32 totalNumOfRequests = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalNumOfRequests:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalnumofrequests_)));
          set_has_totalnumofrequests();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_totalModifiedItems;
        break;
      }

      // required uint32 totalModifiedItems = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalModifiedItems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalmodifieditems_)));
          set_has_totalmodifieditems();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_totalAddItems;
        break;
      }

      // required uint32 totalAddItems = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalAddItems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaladditems_)));
          set_has_totaladditems();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserActivityStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 magazineCount = 1;
  if (has_magazinecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->magazinecount(), output);
  }

  // required uint32 totalNumOfElements = 2;
  if (has_totalnumofelements()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalnumofelements(), output);
  }

  // required uint32 totalNumOfUniqueElements = 3;
  if (has_totalnumofuniqueelements()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totalnumofuniqueelements(), output);
  }

  // required uint32 totalNumOfRequests = 5;
  if (has_totalnumofrequests()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->totalnumofrequests(), output);
  }

  // required uint32 totalModifiedItems = 6;
  if (has_totalmodifieditems()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->totalmodifieditems(), output);
  }

  // required uint32 totalAddItems = 7;
  if (has_totaladditems()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->totaladditems(), output);
  }

}

int UserActivityStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 magazineCount = 1;
    if (has_magazinecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magazinecount());
    }

    // required uint32 totalNumOfElements = 2;
    if (has_totalnumofelements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalnumofelements());
    }

    // required uint32 totalNumOfUniqueElements = 3;
    if (has_totalnumofuniqueelements()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalnumofuniqueelements());
    }

    // required uint32 totalNumOfRequests = 5;
    if (has_totalnumofrequests()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalnumofrequests());
    }

    // required uint32 totalModifiedItems = 6;
    if (has_totalmodifieditems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalmodifieditems());
    }

    // required uint32 totalAddItems = 7;
    if (has_totaladditems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totaladditems());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserActivityStatistics::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserActivityStatistics*>(&from));
}

void UserActivityStatistics::MergeFrom(const UserActivityStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_magazinecount()) {
      set_magazinecount(from.magazinecount());
    }
    if (from.has_totalnumofelements()) {
      set_totalnumofelements(from.totalnumofelements());
    }
    if (from.has_totalnumofuniqueelements()) {
      set_totalnumofuniqueelements(from.totalnumofuniqueelements());
    }
    if (from.has_totalnumofrequests()) {
      set_totalnumofrequests(from.totalnumofrequests());
    }
    if (from.has_totalmodifieditems()) {
      set_totalmodifieditems(from.totalmodifieditems());
    }
    if (from.has_totaladditems()) {
      set_totaladditems(from.totaladditems());
    }
  }
}

void UserActivityStatistics::CopyFrom(const UserActivityStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserActivityStatistics::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void UserActivityStatistics::Swap(UserActivityStatistics* other) {
  if (other != this) {
    std::swap(magazinecount_, other->magazinecount_);
    std::swap(totalnumofelements_, other->totalnumofelements_);
    std::swap(totalnumofuniqueelements_, other->totalnumofuniqueelements_);
    std::swap(totalnumofrequests_, other->totalnumofrequests_);
    std::swap(totalmodifieditems_, other->totalmodifieditems_);
    std::swap(totaladditems_, other->totaladditems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UserActivityStatistics::GetTypeName() const {
  return "user.UserActivityStatistics";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user

// @@protoc_insertion_point(global_scope)
