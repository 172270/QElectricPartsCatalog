// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: parameters.proto

#ifndef PROTOBUF_parameters_2eproto__INCLUDED
#define PROTOBUF_parameters_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace protbuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_parameters_2eproto();
void protobuf_AssignDesc_parameters_2eproto();
void protobuf_ShutdownFile_parameters_2eproto();

class ParameterBasicInformation;
class Parameter;
class Parameter_Config;
class addParameter;
class resAddParameter;
class reqParameters;
class resParameters;

enum Parameter_Config_Type {
  Parameter_Config_Type_INT = 1,
  Parameter_Config_Type_UINT = 2,
  Parameter_Config_Type_DOUBLE = 3,
  Parameter_Config_Type_STRING = 10,
  Parameter_Config_Type_TEMPERATURE = 20,
  Parameter_Config_Type_DATE = 30
};
bool Parameter_Config_Type_IsValid(int value);
const Parameter_Config_Type Parameter_Config_Type_Type_MIN = Parameter_Config_Type_INT;
const Parameter_Config_Type Parameter_Config_Type_Type_MAX = Parameter_Config_Type_DATE;
const int Parameter_Config_Type_Type_ARRAYSIZE = Parameter_Config_Type_Type_MAX + 1;

enum addParameter_AddMode {
  addParameter_AddMode_insert = 1,
  addParameter_AddMode_update = 2
};
bool addParameter_AddMode_IsValid(int value);
const addParameter_AddMode addParameter_AddMode_AddMode_MIN = addParameter_AddMode_insert;
const addParameter_AddMode addParameter_AddMode_AddMode_MAX = addParameter_AddMode_update;
const int addParameter_AddMode_AddMode_ARRAYSIZE = addParameter_AddMode_AddMode_MAX + 1;

enum resAddParameter_addParameterReplay {
  resAddParameter_addParameterReplay_addOk = 1,
  resAddParameter_addParameterReplay_parameterExists = 2,
  resAddParameter_addParameterReplay_updateOk = 3,
  resAddParameter_addParameterReplay_updataFailed_noSuchParameterInDatabase = 4
};
bool resAddParameter_addParameterReplay_IsValid(int value);
const resAddParameter_addParameterReplay resAddParameter_addParameterReplay_addParameterReplay_MIN = resAddParameter_addParameterReplay_addOk;
const resAddParameter_addParameterReplay resAddParameter_addParameterReplay_addParameterReplay_MAX = resAddParameter_addParameterReplay_updataFailed_noSuchParameterInDatabase;
const int resAddParameter_addParameterReplay_addParameterReplay_ARRAYSIZE = resAddParameter_addParameterReplay_addParameterReplay_MAX + 1;

// ===================================================================

class ParameterBasicInformation : public ::google::protobuf::MessageLite {
 public:
  ParameterBasicInformation();
  virtual ~ParameterBasicInformation();

  ParameterBasicInformation(const ParameterBasicInformation& from);

  inline ParameterBasicInformation& operator=(const ParameterBasicInformation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ParameterBasicInformation& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ParameterBasicInformation* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ParameterBasicInformation* other);

  // implements Message ----------------------------------------------

  ParameterBasicInformation* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ParameterBasicInformation& from);
  void MergeFrom(const ParameterBasicInformation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:protbuf.ParameterBasicInformation)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_parameters_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_parameters_2eproto();
  #endif
  friend void protobuf_AssignDesc_parameters_2eproto();
  friend void protobuf_ShutdownFile_parameters_2eproto();

  void InitAsDefaultInstance();
  static ParameterBasicInformation* default_instance_;
};
// -------------------------------------------------------------------

class Parameter_Config : public ::google::protobuf::MessageLite {
 public:
  Parameter_Config();
  virtual ~Parameter_Config();

  Parameter_Config(const Parameter_Config& from);

  inline Parameter_Config& operator=(const Parameter_Config& from) {
    CopyFrom(from);
    return *this;
  }

  static const Parameter_Config& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Parameter_Config* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Parameter_Config* other);

  // implements Message ----------------------------------------------

  Parameter_Config* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Parameter_Config& from);
  void MergeFrom(const Parameter_Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Parameter_Config_Type Type;
  static const Type INT = Parameter_Config_Type_INT;
  static const Type UINT = Parameter_Config_Type_UINT;
  static const Type DOUBLE = Parameter_Config_Type_DOUBLE;
  static const Type STRING = Parameter_Config_Type_STRING;
  static const Type TEMPERATURE = Parameter_Config_Type_TEMPERATURE;
  static const Type DATE = Parameter_Config_Type_DATE;
  static inline bool Type_IsValid(int value) {
    return Parameter_Config_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Parameter_Config_Type_Type_MIN;
  static const Type Type_MAX =
    Parameter_Config_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Parameter_Config_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .protbuf.Parameter.Config.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::protbuf::Parameter_Config_Type type() const;
  inline void set_type(::protbuf::Parameter_Config_Type value);

  // optional bytes defaultValue = 2;
  inline bool has_defaultvalue() const;
  inline void clear_defaultvalue();
  static const int kDefaultValueFieldNumber = 2;
  inline const ::std::string& defaultvalue() const;
  inline void set_defaultvalue(const ::std::string& value);
  inline void set_defaultvalue(const char* value);
  inline void set_defaultvalue(const void* value, size_t size);
  inline ::std::string* mutable_defaultvalue();
  inline ::std::string* release_defaultvalue();
  inline void set_allocated_defaultvalue(::std::string* defaultvalue);

  // optional double minValue = 3;
  inline bool has_minvalue() const;
  inline void clear_minvalue();
  static const int kMinValueFieldNumber = 3;
  inline double minvalue() const;
  inline void set_minvalue(double value);

  // optional double maxValue = 4;
  inline bool has_maxvalue() const;
  inline void clear_maxvalue();
  static const int kMaxValueFieldNumber = 4;
  inline double maxvalue() const;
  inline void set_maxvalue(double value);

  // optional int32 minLength = 5;
  inline bool has_minlength() const;
  inline void clear_minlength();
  static const int kMinLengthFieldNumber = 5;
  inline ::google::protobuf::int32 minlength() const;
  inline void set_minlength(::google::protobuf::int32 value);

  // optional int32 maxLength = 6;
  inline bool has_maxlength() const;
  inline void clear_maxlength();
  static const int kMaxLengthFieldNumber = 6;
  inline ::google::protobuf::int32 maxlength() const;
  inline void set_maxlength(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:protbuf.Parameter.Config)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_defaultvalue();
  inline void clear_has_defaultvalue();
  inline void set_has_minvalue();
  inline void clear_has_minvalue();
  inline void set_has_maxvalue();
  inline void clear_has_maxvalue();
  inline void set_has_minlength();
  inline void clear_has_minlength();
  inline void set_has_maxlength();
  inline void clear_has_maxlength();

  ::std::string* defaultvalue_;
  double minvalue_;
  int type_;
  ::google::protobuf::int32 minlength_;
  double maxvalue_;
  ::google::protobuf::int32 maxlength_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_parameters_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_parameters_2eproto();
  #endif
  friend void protobuf_AssignDesc_parameters_2eproto();
  friend void protobuf_ShutdownFile_parameters_2eproto();

  void InitAsDefaultInstance();
  static Parameter_Config* default_instance_;
};
// -------------------------------------------------------------------

class Parameter : public ::google::protobuf::MessageLite {
 public:
  Parameter();
  virtual ~Parameter();

  Parameter(const Parameter& from);

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const Parameter& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Parameter* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Parameter* other);

  // implements Message ----------------------------------------------

  Parameter* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef Parameter_Config Config;

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string symbol = 3;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // required .protbuf.Parameter.Config config = 4;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 4;
  inline const ::protbuf::Parameter_Config& config() const;
  inline ::protbuf::Parameter_Config* mutable_config();
  inline ::protbuf::Parameter_Config* release_config();
  inline void set_allocated_config(::protbuf::Parameter_Config* config);

  // optional string description = 5;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 5;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:protbuf.Parameter)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_description();
  inline void clear_has_description();

  ::std::string* name_;
  ::std::string* symbol_;
  ::protbuf::Parameter_Config* config_;
  ::std::string* description_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_parameters_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_parameters_2eproto();
  #endif
  friend void protobuf_AssignDesc_parameters_2eproto();
  friend void protobuf_ShutdownFile_parameters_2eproto();

  void InitAsDefaultInstance();
  static Parameter* default_instance_;
};
// -------------------------------------------------------------------

class addParameter : public ::google::protobuf::MessageLite {
 public:
  addParameter();
  virtual ~addParameter();

  addParameter(const addParameter& from);

  inline addParameter& operator=(const addParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const addParameter& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const addParameter* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(addParameter* other);

  // implements Message ----------------------------------------------

  addParameter* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const addParameter& from);
  void MergeFrom(const addParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef addParameter_AddMode AddMode;
  static const AddMode insert = addParameter_AddMode_insert;
  static const AddMode update = addParameter_AddMode_update;
  static inline bool AddMode_IsValid(int value) {
    return addParameter_AddMode_IsValid(value);
  }
  static const AddMode AddMode_MIN =
    addParameter_AddMode_AddMode_MIN;
  static const AddMode AddMode_MAX =
    addParameter_AddMode_AddMode_MAX;
  static const int AddMode_ARRAYSIZE =
    addParameter_AddMode_AddMode_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .protbuf.addParameter.AddMode mode = 1;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 1;
  inline ::protbuf::addParameter_AddMode mode() const;
  inline void set_mode(::protbuf::addParameter_AddMode value);

  // required .protbuf.Parameter parameter = 2;
  inline bool has_parameter() const;
  inline void clear_parameter();
  static const int kParameterFieldNumber = 2;
  inline const ::protbuf::Parameter& parameter() const;
  inline ::protbuf::Parameter* mutable_parameter();
  inline ::protbuf::Parameter* release_parameter();
  inline void set_allocated_parameter(::protbuf::Parameter* parameter);

  // @@protoc_insertion_point(class_scope:protbuf.addParameter)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_parameter();
  inline void clear_has_parameter();

  ::protbuf::Parameter* parameter_;
  int mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_parameters_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_parameters_2eproto();
  #endif
  friend void protobuf_AssignDesc_parameters_2eproto();
  friend void protobuf_ShutdownFile_parameters_2eproto();

  void InitAsDefaultInstance();
  static addParameter* default_instance_;
};
// -------------------------------------------------------------------

class resAddParameter : public ::google::protobuf::MessageLite {
 public:
  resAddParameter();
  virtual ~resAddParameter();

  resAddParameter(const resAddParameter& from);

  inline resAddParameter& operator=(const resAddParameter& from) {
    CopyFrom(from);
    return *this;
  }

  static const resAddParameter& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const resAddParameter* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(resAddParameter* other);

  // implements Message ----------------------------------------------

  resAddParameter* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const resAddParameter& from);
  void MergeFrom(const resAddParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  typedef resAddParameter_addParameterReplay addParameterReplay;
  static const addParameterReplay addOk = resAddParameter_addParameterReplay_addOk;
  static const addParameterReplay parameterExists = resAddParameter_addParameterReplay_parameterExists;
  static const addParameterReplay updateOk = resAddParameter_addParameterReplay_updateOk;
  static const addParameterReplay updataFailed_noSuchParameterInDatabase = resAddParameter_addParameterReplay_updataFailed_noSuchParameterInDatabase;
  static inline bool addParameterReplay_IsValid(int value) {
    return resAddParameter_addParameterReplay_IsValid(value);
  }
  static const addParameterReplay addParameterReplay_MIN =
    resAddParameter_addParameterReplay_addParameterReplay_MIN;
  static const addParameterReplay addParameterReplay_MAX =
    resAddParameter_addParameterReplay_addParameterReplay_MAX;
  static const int addParameterReplay_ARRAYSIZE =
    resAddParameter_addParameterReplay_addParameterReplay_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .protbuf.resAddParameter.addParameterReplay replay = 1;
  inline int replay_size() const;
  inline void clear_replay();
  static const int kReplayFieldNumber = 1;
  inline ::protbuf::resAddParameter_addParameterReplay replay(int index) const;
  inline void set_replay(int index, ::protbuf::resAddParameter_addParameterReplay value);
  inline void add_replay(::protbuf::resAddParameter_addParameterReplay value);
  inline const ::google::protobuf::RepeatedField<int>& replay() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_replay();

  // @@protoc_insertion_point(class_scope:protbuf.resAddParameter)
 private:

  ::google::protobuf::RepeatedField<int> replay_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_parameters_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_parameters_2eproto();
  #endif
  friend void protobuf_AssignDesc_parameters_2eproto();
  friend void protobuf_ShutdownFile_parameters_2eproto();

  void InitAsDefaultInstance();
  static resAddParameter* default_instance_;
};
// -------------------------------------------------------------------

class reqParameters : public ::google::protobuf::MessageLite {
 public:
  reqParameters();
  virtual ~reqParameters();

  reqParameters(const reqParameters& from);

  inline reqParameters& operator=(const reqParameters& from) {
    CopyFrom(from);
    return *this;
  }

  static const reqParameters& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const reqParameters* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(reqParameters* other);

  // implements Message ----------------------------------------------

  reqParameters* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const reqParameters& from);
  void MergeFrom(const reqParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool getDiff = 1;
  inline bool has_getdiff() const;
  inline void clear_getdiff();
  static const int kGetDiffFieldNumber = 1;
  inline bool getdiff() const;
  inline void set_getdiff(bool value);

  // @@protoc_insertion_point(class_scope:protbuf.reqParameters)
 private:
  inline void set_has_getdiff();
  inline void clear_has_getdiff();

  bool getdiff_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_parameters_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_parameters_2eproto();
  #endif
  friend void protobuf_AssignDesc_parameters_2eproto();
  friend void protobuf_ShutdownFile_parameters_2eproto();

  void InitAsDefaultInstance();
  static reqParameters* default_instance_;
};
// -------------------------------------------------------------------

class resParameters : public ::google::protobuf::MessageLite {
 public:
  resParameters();
  virtual ~resParameters();

  resParameters(const resParameters& from);

  inline resParameters& operator=(const resParameters& from) {
    CopyFrom(from);
    return *this;
  }

  static const resParameters& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const resParameters* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(resParameters* other);

  // implements Message ----------------------------------------------

  resParameters* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const resParameters& from);
  void MergeFrom(const resParameters& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protbuf.Parameter parameters = 1;
  inline int parameters_size() const;
  inline void clear_parameters();
  static const int kParametersFieldNumber = 1;
  inline const ::protbuf::Parameter& parameters(int index) const;
  inline ::protbuf::Parameter* mutable_parameters(int index);
  inline ::protbuf::Parameter* add_parameters();
  inline const ::google::protobuf::RepeatedPtrField< ::protbuf::Parameter >&
      parameters() const;
  inline ::google::protobuf::RepeatedPtrField< ::protbuf::Parameter >*
      mutable_parameters();

  // @@protoc_insertion_point(class_scope:protbuf.resParameters)
 private:

  ::google::protobuf::RepeatedPtrField< ::protbuf::Parameter > parameters_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_parameters_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_parameters_2eproto();
  #endif
  friend void protobuf_AssignDesc_parameters_2eproto();
  friend void protobuf_ShutdownFile_parameters_2eproto();

  void InitAsDefaultInstance();
  static resParameters* default_instance_;
};
// ===================================================================


// ===================================================================

// ParameterBasicInformation

// required uint32 id = 1;
inline bool ParameterBasicInformation::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParameterBasicInformation::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParameterBasicInformation::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParameterBasicInformation::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ParameterBasicInformation::id() const {
  return id_;
}
inline void ParameterBasicInformation::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Parameter_Config

// required .protbuf.Parameter.Config.Type type = 1;
inline bool Parameter_Config::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parameter_Config::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parameter_Config::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parameter_Config::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::protbuf::Parameter_Config_Type Parameter_Config::type() const {
  return static_cast< ::protbuf::Parameter_Config_Type >(type_);
}
inline void Parameter_Config::set_type(::protbuf::Parameter_Config_Type value) {
  assert(::protbuf::Parameter_Config_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bytes defaultValue = 2;
inline bool Parameter_Config::has_defaultvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Parameter_Config::set_has_defaultvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Parameter_Config::clear_has_defaultvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Parameter_Config::clear_defaultvalue() {
  if (defaultvalue_ != &::google::protobuf::internal::kEmptyString) {
    defaultvalue_->clear();
  }
  clear_has_defaultvalue();
}
inline const ::std::string& Parameter_Config::defaultvalue() const {
  return *defaultvalue_;
}
inline void Parameter_Config::set_defaultvalue(const ::std::string& value) {
  set_has_defaultvalue();
  if (defaultvalue_ == &::google::protobuf::internal::kEmptyString) {
    defaultvalue_ = new ::std::string;
  }
  defaultvalue_->assign(value);
}
inline void Parameter_Config::set_defaultvalue(const char* value) {
  set_has_defaultvalue();
  if (defaultvalue_ == &::google::protobuf::internal::kEmptyString) {
    defaultvalue_ = new ::std::string;
  }
  defaultvalue_->assign(value);
}
inline void Parameter_Config::set_defaultvalue(const void* value, size_t size) {
  set_has_defaultvalue();
  if (defaultvalue_ == &::google::protobuf::internal::kEmptyString) {
    defaultvalue_ = new ::std::string;
  }
  defaultvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Parameter_Config::mutable_defaultvalue() {
  set_has_defaultvalue();
  if (defaultvalue_ == &::google::protobuf::internal::kEmptyString) {
    defaultvalue_ = new ::std::string;
  }
  return defaultvalue_;
}
inline ::std::string* Parameter_Config::release_defaultvalue() {
  clear_has_defaultvalue();
  if (defaultvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = defaultvalue_;
    defaultvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Parameter_Config::set_allocated_defaultvalue(::std::string* defaultvalue) {
  if (defaultvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete defaultvalue_;
  }
  if (defaultvalue) {
    set_has_defaultvalue();
    defaultvalue_ = defaultvalue;
  } else {
    clear_has_defaultvalue();
    defaultvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double minValue = 3;
inline bool Parameter_Config::has_minvalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Parameter_Config::set_has_minvalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Parameter_Config::clear_has_minvalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Parameter_Config::clear_minvalue() {
  minvalue_ = 0;
  clear_has_minvalue();
}
inline double Parameter_Config::minvalue() const {
  return minvalue_;
}
inline void Parameter_Config::set_minvalue(double value) {
  set_has_minvalue();
  minvalue_ = value;
}

// optional double maxValue = 4;
inline bool Parameter_Config::has_maxvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Parameter_Config::set_has_maxvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Parameter_Config::clear_has_maxvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Parameter_Config::clear_maxvalue() {
  maxvalue_ = 0;
  clear_has_maxvalue();
}
inline double Parameter_Config::maxvalue() const {
  return maxvalue_;
}
inline void Parameter_Config::set_maxvalue(double value) {
  set_has_maxvalue();
  maxvalue_ = value;
}

// optional int32 minLength = 5;
inline bool Parameter_Config::has_minlength() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Parameter_Config::set_has_minlength() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Parameter_Config::clear_has_minlength() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Parameter_Config::clear_minlength() {
  minlength_ = 0;
  clear_has_minlength();
}
inline ::google::protobuf::int32 Parameter_Config::minlength() const {
  return minlength_;
}
inline void Parameter_Config::set_minlength(::google::protobuf::int32 value) {
  set_has_minlength();
  minlength_ = value;
}

// optional int32 maxLength = 6;
inline bool Parameter_Config::has_maxlength() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Parameter_Config::set_has_maxlength() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Parameter_Config::clear_has_maxlength() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Parameter_Config::clear_maxlength() {
  maxlength_ = 0;
  clear_has_maxlength();
}
inline ::google::protobuf::int32 Parameter_Config::maxlength() const {
  return maxlength_;
}
inline void Parameter_Config::set_maxlength(::google::protobuf::int32 value) {
  set_has_maxlength();
  maxlength_ = value;
}

// -------------------------------------------------------------------

// Parameter

// required uint32 id = 1;
inline bool Parameter::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Parameter::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Parameter::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Parameter::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Parameter::id() const {
  return id_;
}
inline void Parameter::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool Parameter::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Parameter::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Parameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Parameter::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Parameter::name() const {
  return *name_;
}
inline void Parameter::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Parameter::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Parameter::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Parameter::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Parameter::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Parameter::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string symbol = 3;
inline bool Parameter::has_symbol() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Parameter::set_has_symbol() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Parameter::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Parameter::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& Parameter::symbol() const {
  return *symbol_;
}
inline void Parameter::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void Parameter::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
}
inline void Parameter::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Parameter::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    symbol_ = new ::std::string;
  }
  return symbol_;
}
inline ::std::string* Parameter::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Parameter::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .protbuf.Parameter.Config config = 4;
inline bool Parameter::has_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Parameter::set_has_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Parameter::clear_has_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Parameter::clear_config() {
  if (config_ != NULL) config_->::protbuf::Parameter_Config::Clear();
  clear_has_config();
}
inline const ::protbuf::Parameter_Config& Parameter::config() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return config_ != NULL ? *config_ : *default_instance().config_;
#else
  return config_ != NULL ? *config_ : *default_instance_->config_;
#endif
}
inline ::protbuf::Parameter_Config* Parameter::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::protbuf::Parameter_Config;
  return config_;
}
inline ::protbuf::Parameter_Config* Parameter::release_config() {
  clear_has_config();
  ::protbuf::Parameter_Config* temp = config_;
  config_ = NULL;
  return temp;
}
inline void Parameter::set_allocated_config(::protbuf::Parameter_Config* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
}

// optional string description = 5;
inline bool Parameter::has_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Parameter::set_has_description() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Parameter::clear_has_description() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Parameter::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Parameter::description() const {
  return *description_;
}
inline void Parameter::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Parameter::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Parameter::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Parameter::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Parameter::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Parameter::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// addParameter

// required .protbuf.addParameter.AddMode mode = 1;
inline bool addParameter::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void addParameter::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void addParameter::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void addParameter::clear_mode() {
  mode_ = 1;
  clear_has_mode();
}
inline ::protbuf::addParameter_AddMode addParameter::mode() const {
  return static_cast< ::protbuf::addParameter_AddMode >(mode_);
}
inline void addParameter::set_mode(::protbuf::addParameter_AddMode value) {
  assert(::protbuf::addParameter_AddMode_IsValid(value));
  set_has_mode();
  mode_ = value;
}

// required .protbuf.Parameter parameter = 2;
inline bool addParameter::has_parameter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void addParameter::set_has_parameter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void addParameter::clear_has_parameter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void addParameter::clear_parameter() {
  if (parameter_ != NULL) parameter_->::protbuf::Parameter::Clear();
  clear_has_parameter();
}
inline const ::protbuf::Parameter& addParameter::parameter() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return parameter_ != NULL ? *parameter_ : *default_instance().parameter_;
#else
  return parameter_ != NULL ? *parameter_ : *default_instance_->parameter_;
#endif
}
inline ::protbuf::Parameter* addParameter::mutable_parameter() {
  set_has_parameter();
  if (parameter_ == NULL) parameter_ = new ::protbuf::Parameter;
  return parameter_;
}
inline ::protbuf::Parameter* addParameter::release_parameter() {
  clear_has_parameter();
  ::protbuf::Parameter* temp = parameter_;
  parameter_ = NULL;
  return temp;
}
inline void addParameter::set_allocated_parameter(::protbuf::Parameter* parameter) {
  delete parameter_;
  parameter_ = parameter;
  if (parameter) {
    set_has_parameter();
  } else {
    clear_has_parameter();
  }
}

// -------------------------------------------------------------------

// resAddParameter

// repeated .protbuf.resAddParameter.addParameterReplay replay = 1;
inline int resAddParameter::replay_size() const {
  return replay_.size();
}
inline void resAddParameter::clear_replay() {
  replay_.Clear();
}
inline ::protbuf::resAddParameter_addParameterReplay resAddParameter::replay(int index) const {
  return static_cast< ::protbuf::resAddParameter_addParameterReplay >(replay_.Get(index));
}
inline void resAddParameter::set_replay(int index, ::protbuf::resAddParameter_addParameterReplay value) {
  assert(::protbuf::resAddParameter_addParameterReplay_IsValid(value));
  replay_.Set(index, value);
}
inline void resAddParameter::add_replay(::protbuf::resAddParameter_addParameterReplay value) {
  assert(::protbuf::resAddParameter_addParameterReplay_IsValid(value));
  replay_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
resAddParameter::replay() const {
  return replay_;
}
inline ::google::protobuf::RepeatedField<int>*
resAddParameter::mutable_replay() {
  return &replay_;
}

// -------------------------------------------------------------------

// reqParameters

// optional bool getDiff = 1;
inline bool reqParameters::has_getdiff() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void reqParameters::set_has_getdiff() {
  _has_bits_[0] |= 0x00000001u;
}
inline void reqParameters::clear_has_getdiff() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void reqParameters::clear_getdiff() {
  getdiff_ = false;
  clear_has_getdiff();
}
inline bool reqParameters::getdiff() const {
  return getdiff_;
}
inline void reqParameters::set_getdiff(bool value) {
  set_has_getdiff();
  getdiff_ = value;
}

// -------------------------------------------------------------------

// resParameters

// repeated .protbuf.Parameter parameters = 1;
inline int resParameters::parameters_size() const {
  return parameters_.size();
}
inline void resParameters::clear_parameters() {
  parameters_.Clear();
}
inline const ::protbuf::Parameter& resParameters::parameters(int index) const {
  return parameters_.Get(index);
}
inline ::protbuf::Parameter* resParameters::mutable_parameters(int index) {
  return parameters_.Mutable(index);
}
inline ::protbuf::Parameter* resParameters::add_parameters() {
  return parameters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protbuf::Parameter >&
resParameters::parameters() const {
  return parameters_;
}
inline ::google::protobuf::RepeatedPtrField< ::protbuf::Parameter >*
resParameters::mutable_parameters() {
  return &parameters_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protbuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_parameters_2eproto__INCLUDED
