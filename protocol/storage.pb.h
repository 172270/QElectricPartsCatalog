// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#ifndef PROTOBUF_storage_2eproto__INCLUDED
#define PROTOBUF_storage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace storage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_storage_2eproto();
void protobuf_AssignDesc_storage_2eproto();
void protobuf_ShutdownFile_storage_2eproto();

class Storage;

// ===================================================================

class Storage : public ::google::protobuf::MessageLite {
 public:
  Storage();
  virtual ~Storage();

  Storage(const Storage& from);

  inline Storage& operator=(const Storage& from) {
    CopyFrom(from);
    return *this;
  }

  static const Storage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Storage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Storage* other);

  // implements Message ----------------------------------------------

  Storage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Storage& from);
  void MergeFrom(const Storage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 msgType = 1 [default = 16];
  inline bool has_msgtype() const;
  inline void clear_msgtype();
  static const int kMsgTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 msgtype() const;
  inline void set_msgtype(::google::protobuf::uint32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional fixed64 creationDate = 5;
  inline bool has_creationdate() const;
  inline void clear_creationdate();
  static const int kCreationDateFieldNumber = 5;
  inline ::google::protobuf::uint64 creationdate() const;
  inline void set_creationdate(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:storage.Storage)
 private:
  inline void set_has_msgtype();
  inline void clear_has_msgtype();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_creationdate();
  inline void clear_has_creationdate();

  ::std::string* name_;
  ::google::protobuf::uint32 msgtype_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint64 creationdate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_storage_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_storage_2eproto();
  #endif
  friend void protobuf_AssignDesc_storage_2eproto();
  friend void protobuf_ShutdownFile_storage_2eproto();

  void InitAsDefaultInstance();
  static Storage* default_instance_;
};
// ===================================================================


// ===================================================================

// Storage

// required uint32 msgType = 1 [default = 16];
inline bool Storage::has_msgtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Storage::set_has_msgtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Storage::clear_has_msgtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Storage::clear_msgtype() {
  msgtype_ = 16u;
  clear_has_msgtype();
}
inline ::google::protobuf::uint32 Storage::msgtype() const {
  return msgtype_;
}
inline void Storage::set_msgtype(::google::protobuf::uint32 value) {
  set_has_msgtype();
  msgtype_ = value;
}

// required string name = 3;
inline bool Storage::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Storage::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Storage::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Storage::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Storage::name() const {
  return *name_;
}
inline void Storage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Storage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Storage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Storage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Storage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Storage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 id = 4;
inline bool Storage::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Storage::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Storage::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Storage::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Storage::id() const {
  return id_;
}
inline void Storage::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional fixed64 creationDate = 5;
inline bool Storage::has_creationdate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Storage::set_has_creationdate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Storage::clear_has_creationdate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Storage::clear_creationdate() {
  creationdate_ = GOOGLE_ULONGLONG(0);
  clear_has_creationdate();
}
inline ::google::protobuf::uint64 Storage::creationdate() const {
  return creationdate_;
}
inline void Storage::set_creationdate(::google::protobuf::uint64 value) {
  set_has_creationdate();
  creationdate_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace storage

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_storage_2eproto__INCLUDED
