// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "storage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace storage {

namespace {

const ::google::protobuf::Descriptor* Storage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Storage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StorageStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StorageStatistics_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_storage_2eproto() {
  protobuf_AddDesc_storage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "storage.proto");
  GOOGLE_CHECK(file != NULL);
  Storage_descriptor_ = file->message_type(0);
  static const int Storage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Storage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Storage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Storage, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Storage, creationdate_),
  };
  Storage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Storage_descriptor_,
      Storage::default_instance_,
      Storage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Storage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Storage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Storage));
  StorageStatistics_descriptor_ = file->message_type(1);
  static const int StorageStatistics_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageStatistics, elementsnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageStatistics, uniqueelementsnumber_),
  };
  StorageStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StorageStatistics_descriptor_,
      StorageStatistics::default_instance_,
      StorageStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StorageStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StorageStatistics));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_storage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Storage_descriptor_, &Storage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StorageStatistics_descriptor_, &StorageStatistics::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_storage_2eproto() {
  delete Storage::default_instance_;
  delete Storage_reflection_;
  delete StorageStatistics::default_instance_;
  delete StorageStatistics_reflection_;
}

void protobuf_AddDesc_storage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rstorage.proto\022\007storage\"J\n\007Storage\022\014\n\004n"
    "ame\030\003 \002(\t\022\n\n\002id\030\004 \002(\r\022\017\n\007ownerId\030\005 \001(\r\022\024"
    "\n\014creationDate\030\006 \001(\006\"I\n\021StorageStatistic"
    "s\022\026\n\016elementsNumber\030\001 \002(\r\022\034\n\024uniqueEleme"
    "ntsNumber\030\002 \002(\r", 175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "storage.proto", &protobuf_RegisterTypes);
  Storage::default_instance_ = new Storage();
  StorageStatistics::default_instance_ = new StorageStatistics();
  Storage::default_instance_->InitAsDefaultInstance();
  StorageStatistics::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_storage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_storage_2eproto {
  StaticDescriptorInitializer_storage_2eproto() {
    protobuf_AddDesc_storage_2eproto();
  }
} static_descriptor_initializer_storage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Storage::kNameFieldNumber;
const int Storage::kIdFieldNumber;
const int Storage::kOwnerIdFieldNumber;
const int Storage::kCreationDateFieldNumber;
#endif  // !_MSC_VER

Storage::Storage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Storage::InitAsDefaultInstance() {
}

Storage::Storage(const Storage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Storage::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  ownerid_ = 0u;
  creationdate_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Storage::~Storage() {
  SharedDtor();
}

void Storage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Storage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Storage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Storage_descriptor_;
}

const Storage& Storage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storage_2eproto();
  return *default_instance_;
}

Storage* Storage::default_instance_ = NULL;

Storage* Storage::New() const {
  return new Storage;
}

void Storage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0u;
    ownerid_ = 0u;
    creationdate_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Storage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // required uint32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ownerId;
        break;
      }

      // optional uint32 ownerId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_creationDate;
        break;
      }

      // optional fixed64 creationDate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_creationDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &creationdate_)));
          set_has_creationdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Storage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required uint32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  // optional uint32 ownerId = 5;
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ownerid(), output);
  }

  // optional fixed64 creationDate = 6;
  if (has_creationdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->creationdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Storage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required uint32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  // optional uint32 ownerId = 5;
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ownerid(), target);
  }

  // optional fixed64 creationDate = 6;
  if (has_creationdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->creationdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Storage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 ownerId = 5;
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ownerid());
    }

    // optional fixed64 creationDate = 6;
    if (has_creationdate()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Storage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Storage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Storage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Storage::MergeFrom(const Storage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_creationdate()) {
      set_creationdate(from.creationdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Storage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Storage::CopyFrom(const Storage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Storage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Storage::Swap(Storage* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(creationdate_, other->creationdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Storage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Storage_descriptor_;
  metadata.reflection = Storage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StorageStatistics::kElementsNumberFieldNumber;
const int StorageStatistics::kUniqueElementsNumberFieldNumber;
#endif  // !_MSC_VER

StorageStatistics::StorageStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StorageStatistics::InitAsDefaultInstance() {
}

StorageStatistics::StorageStatistics(const StorageStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StorageStatistics::SharedCtor() {
  _cached_size_ = 0;
  elementsnumber_ = 0u;
  uniqueelementsnumber_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StorageStatistics::~StorageStatistics() {
  SharedDtor();
}

void StorageStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StorageStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StorageStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StorageStatistics_descriptor_;
}

const StorageStatistics& StorageStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_storage_2eproto();
  return *default_instance_;
}

StorageStatistics* StorageStatistics::default_instance_ = NULL;

StorageStatistics* StorageStatistics::New() const {
  return new StorageStatistics;
}

void StorageStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elementsnumber_ = 0u;
    uniqueelementsnumber_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StorageStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 elementsNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementsnumber_)));
          set_has_elementsnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uniqueElementsNumber;
        break;
      }

      // required uint32 uniqueElementsNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uniqueElementsNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uniqueelementsnumber_)));
          set_has_uniqueelementsnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StorageStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 elementsNumber = 1;
  if (has_elementsnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elementsnumber(), output);
  }

  // required uint32 uniqueElementsNumber = 2;
  if (has_uniqueelementsnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uniqueelementsnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StorageStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 elementsNumber = 1;
  if (has_elementsnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->elementsnumber(), target);
  }

  // required uint32 uniqueElementsNumber = 2;
  if (has_uniqueelementsnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uniqueelementsnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StorageStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 elementsNumber = 1;
    if (has_elementsnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementsnumber());
    }

    // required uint32 uniqueElementsNumber = 2;
    if (has_uniqueelementsnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uniqueelementsnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StorageStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StorageStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StorageStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StorageStatistics::MergeFrom(const StorageStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementsnumber()) {
      set_elementsnumber(from.elementsnumber());
    }
    if (from.has_uniqueelementsnumber()) {
      set_uniqueelementsnumber(from.uniqueelementsnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StorageStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StorageStatistics::CopyFrom(const StorageStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageStatistics::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StorageStatistics::Swap(StorageStatistics* other) {
  if (other != this) {
    std::swap(elementsnumber_, other->elementsnumber_);
    std::swap(uniqueelementsnumber_, other->uniqueelementsnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StorageStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StorageStatistics_descriptor_;
  metadata.reflection = StorageStatistics_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace storage

// @@protoc_insertion_point(global_scope)
