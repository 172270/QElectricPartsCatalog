// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "group.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace groups {

namespace {

const ::google::protobuf::Descriptor* GroupBasicInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupBasicInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Group_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_group_2eproto() {
  protobuf_AddDesc_group_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "group.proto");
  GOOGLE_CHECK(file != NULL);
  GroupBasicInformation_descriptor_ = file->message_type(0);
  static const int GroupBasicInformation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBasicInformation, id_),
  };
  GroupBasicInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupBasicInformation_descriptor_,
      GroupBasicInformation::default_instance_,
      GroupBasicInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBasicInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupBasicInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupBasicInformation));
  Group_descriptor_ = file->message_type(1);
  static const int Group_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, parentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, allowsets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, allowitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, creationdate_),
  };
  Group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Group_descriptor_,
      Group::default_instance_,
      Group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Group));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_group_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupBasicInformation_descriptor_, &GroupBasicInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Group_descriptor_, &Group::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_group_2eproto() {
  delete GroupBasicInformation::default_instance_;
  delete GroupBasicInformation_reflection_;
  delete Group::default_instance_;
  delete Group_reflection_;
}

void protobuf_AddDesc_group_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::parameters::protobuf_AddDesc_parameters_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013group.proto\022\006groups\032\020parameters.proto\""
    "#\n\025GroupBasicInformation\022\n\n\002id\030\001 \002(\r\"\300\001\n"
    "\005Group\022\014\n\004name\030\003 \002(\t\022\n\n\002ID\030\004 \002(\r\022\020\n\010pare"
    "ntID\030\005 \002(\r\022\021\n\tallowSets\030\006 \002(\010\022\022\n\nallowIt"
    "ems\030\007 \002(\010\0229\n\nparameters\030\010 \003(\0132%.paramete"
    "rs.ParameterBasicInformation\022\023\n\013descript"
    "ion\030\t \001(\t\022\024\n\014creationDate\030\n \001(\004P\000", 273);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "group.proto", &protobuf_RegisterTypes);
  GroupBasicInformation::default_instance_ = new GroupBasicInformation();
  Group::default_instance_ = new Group();
  GroupBasicInformation::default_instance_->InitAsDefaultInstance();
  Group::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_group_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_group_2eproto {
  StaticDescriptorInitializer_group_2eproto() {
    protobuf_AddDesc_group_2eproto();
  }
} static_descriptor_initializer_group_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GroupBasicInformation::kIdFieldNumber;
#endif  // !_MSC_VER

GroupBasicInformation::GroupBasicInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupBasicInformation::InitAsDefaultInstance() {
}

GroupBasicInformation::GroupBasicInformation(const GroupBasicInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupBasicInformation::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupBasicInformation::~GroupBasicInformation() {
  SharedDtor();
}

void GroupBasicInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupBasicInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupBasicInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupBasicInformation_descriptor_;
}

const GroupBasicInformation& GroupBasicInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupBasicInformation* GroupBasicInformation::default_instance_ = NULL;

GroupBasicInformation* GroupBasicInformation::New() const {
  return new GroupBasicInformation;
}

void GroupBasicInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupBasicInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupBasicInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupBasicInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupBasicInformation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupBasicInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupBasicInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupBasicInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupBasicInformation::MergeFrom(const GroupBasicInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupBasicInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupBasicInformation::CopyFrom(const GroupBasicInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBasicInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupBasicInformation::Swap(GroupBasicInformation* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupBasicInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupBasicInformation_descriptor_;
  metadata.reflection = GroupBasicInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Group::kNameFieldNumber;
const int Group::kIDFieldNumber;
const int Group::kParentIDFieldNumber;
const int Group::kAllowSetsFieldNumber;
const int Group::kAllowItemsFieldNumber;
const int Group::kParametersFieldNumber;
const int Group::kDescriptionFieldNumber;
const int Group::kCreationDateFieldNumber;
#endif  // !_MSC_VER

Group::Group()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Group::InitAsDefaultInstance() {
}

Group::Group(const Group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Group::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  parentid_ = 0u;
  allowsets_ = false;
  allowitems_ = false;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creationdate_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Group::~Group() {
  SharedDtor();
}

void Group::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Group_descriptor_;
}

const Group& Group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

Group* Group::default_instance_ = NULL;

Group* Group::New() const {
  return new Group;
}

void Group::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0u;
    parentid_ = 0u;
    allowsets_ = false;
    allowitems_ = false;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    creationdate_ = GOOGLE_ULONGLONG(0);
  }
  parameters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ID;
        break;
      }

      // required uint32 ID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parentID;
        break;
      }

      // required uint32 parentID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parentid_)));
          set_has_parentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_allowSets;
        break;
      }

      // required bool allowSets = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowSets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowsets_)));
          set_has_allowsets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_allowItems;
        break;
      }

      // required bool allowItems = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allowItems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allowitems_)));
          set_has_allowitems();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_parameters;
        break;
      }

      // repeated .parameters.ParameterBasicInformation parameters = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_parameters;
        if (input->ExpectTag(74)) goto parse_description;
        break;
      }

      // optional string description = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_creationDate;
        break;
      }

      // optional uint64 creationDate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creationDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creationdate_)));
          set_has_creationdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required uint32 ID = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  // required uint32 parentID = 5;
  if (has_parentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->parentid(), output);
  }

  // required bool allowSets = 6;
  if (has_allowsets()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->allowsets(), output);
  }

  // required bool allowItems = 7;
  if (has_allowitems()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->allowitems(), output);
  }

  // repeated .parameters.ParameterBasicInformation parameters = 8;
  for (int i = 0; i < this->parameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->parameters(i), output);
  }

  // optional string description = 9;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->description(), output);
  }

  // optional uint64 creationDate = 10;
  if (has_creationdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->creationdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required uint32 ID = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  // required uint32 parentID = 5;
  if (has_parentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->parentid(), target);
  }

  // required bool allowSets = 6;
  if (has_allowsets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->allowsets(), target);
  }

  // required bool allowItems = 7;
  if (has_allowitems()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->allowitems(), target);
  }

  // repeated .parameters.ParameterBasicInformation parameters = 8;
  for (int i = 0; i < this->parameters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->parameters(i), target);
  }

  // optional string description = 9;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->description(), target);
  }

  // optional uint64 creationDate = 10;
  if (has_creationdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->creationdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 ID = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 parentID = 5;
    if (has_parentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parentid());
    }

    // required bool allowSets = 6;
    if (has_allowsets()) {
      total_size += 1 + 1;
    }

    // required bool allowItems = 7;
    if (has_allowitems()) {
      total_size += 1 + 1;
    }

    // optional string description = 9;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint64 creationDate = 10;
    if (has_creationdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creationdate());
    }

  }
  // repeated .parameters.ParameterBasicInformation parameters = 8;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameters_.MergeFrom(from.parameters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_parentid()) {
      set_parentid(from.parentid());
    }
    if (from.has_allowsets()) {
      set_allowsets(from.allowsets());
    }
    if (from.has_allowitems()) {
      set_allowitems(from.allowitems());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_creationdate()) {
      set_creationdate(from.creationdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < parameters_size(); i++) {
    if (!this->parameters(i).IsInitialized()) return false;
  }
  return true;
}

void Group::Swap(Group* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(parentid_, other->parentid_);
    std::swap(allowsets_, other->allowsets_);
    std::swap(allowitems_, other->allowitems_);
    parameters_.Swap(&other->parameters_);
    std::swap(description_, other->description_);
    std::swap(creationdate_, other->creationdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Group_descriptor_;
  metadata.reflection = Group_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace groups

// @@protoc_insertion_point(global_scope)
