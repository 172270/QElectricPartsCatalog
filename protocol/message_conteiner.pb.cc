// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_conteiner.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message_conteiner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace container {

void protobuf_ShutdownFile_message_5fconteiner_2eproto() {
  delete MessageContainer::default_instance_;
  delete MessageCapsule::default_instance_;
  delete Items::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_message_5fconteiner_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_message_5fconteiner_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::protobuf_AddDesc_types_2eproto();
  ::groups::protobuf_AddDesc_group_2eproto();
  ::user::protobuf_AddDesc_user_2eproto();
  ::package::protobuf_AddDesc_package_2eproto();
  ::parameters::protobuf_AddDesc_parameters_2eproto();
  ::item::protobuf_AddDesc_item_2eproto();
  MessageContainer::default_instance_ = new MessageContainer();
  MessageCapsule::default_instance_ = new MessageCapsule();
  Items::default_instance_ = new Items();
  MessageContainer::default_instance_->InitAsDefaultInstance();
  MessageCapsule::default_instance_->InitAsDefaultInstance();
  Items::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_5fconteiner_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_message_5fconteiner_2eproto_once_);
void protobuf_AddDesc_message_5fconteiner_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_message_5fconteiner_2eproto_once_,
                 &protobuf_AddDesc_message_5fconteiner_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_5fconteiner_2eproto {
  StaticDescriptorInitializer_message_5fconteiner_2eproto() {
    protobuf_AddDesc_message_5fconteiner_2eproto();
  }
} static_descriptor_initializer_message_5fconteiner_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MessageContainer::kCapsulesFieldNumber;
#endif  // !_MSC_VER

MessageContainer::MessageContainer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MessageContainer::InitAsDefaultInstance() {
}

MessageContainer::MessageContainer(const MessageContainer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MessageContainer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageContainer::~MessageContainer() {
  SharedDtor();
}

void MessageContainer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MessageContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MessageContainer& MessageContainer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_5fconteiner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fconteiner_2eproto();
#endif
  return *default_instance_;
}

MessageContainer* MessageContainer::default_instance_ = NULL;

MessageContainer* MessageContainer::New() const {
  return new MessageContainer;
}

void MessageContainer::Clear() {
  capsules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MessageContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .container.MessageCapsule capsules = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_capsules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_capsules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_capsules;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .container.MessageCapsule capsules = 1;
  for (int i = 0; i < this->capsules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->capsules(i), output);
  }

}

int MessageContainer::ByteSize() const {
  int total_size = 0;

  // repeated .container.MessageCapsule capsules = 1;
  total_size += 1 * this->capsules_size();
  for (int i = 0; i < this->capsules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->capsules(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageContainer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MessageContainer*>(&from));
}

void MessageContainer::MergeFrom(const MessageContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  capsules_.MergeFrom(from.capsules_);
}

void MessageContainer::CopyFrom(const MessageContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageContainer::IsInitialized() const {

  for (int i = 0; i < capsules_size(); i++) {
    if (!this->capsules(i).IsInitialized()) return false;
  }
  return true;
}

void MessageContainer::Swap(MessageContainer* other) {
  if (other != this) {
    capsules_.Swap(&other->capsules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MessageContainer::GetTypeName() const {
  return "container.MessageContainer";
}


// ===================================================================

#ifndef _MSC_VER
const int MessageCapsule::kMsgTypeFieldNumber;
const int MessageCapsule::kDataFieldNumber;
#endif  // !_MSC_VER

MessageCapsule::MessageCapsule()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MessageCapsule::InitAsDefaultInstance() {
}

MessageCapsule::MessageCapsule(const MessageCapsule& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MessageCapsule::SharedCtor() {
  _cached_size_ = 0;
  msgtype_ = 1;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageCapsule::~MessageCapsule() {
  SharedDtor();
}

void MessageCapsule::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MessageCapsule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MessageCapsule& MessageCapsule::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_5fconteiner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fconteiner_2eproto();
#endif
  return *default_instance_;
}

MessageCapsule* MessageCapsule::default_instance_ = NULL;

MessageCapsule* MessageCapsule::New() const {
  return new MessageCapsule;
}

void MessageCapsule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgtype_ = 1;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MessageCapsule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgType msgType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgType_IsValid(value)) {
            set_msgtype(static_cast< ::MsgType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MessageCapsule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .MsgType msgType = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

}

int MessageCapsule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgType msgType = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageCapsule::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MessageCapsule*>(&from));
}

void MessageCapsule::MergeFrom(const MessageCapsule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
}

void MessageCapsule::CopyFrom(const MessageCapsule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageCapsule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MessageCapsule::Swap(MessageCapsule* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MessageCapsule::GetTypeName() const {
  return "container.MessageCapsule";
}


// ===================================================================

#ifndef _MSC_VER
const int Items::kGroupsFieldNumber;
const int Items::kUsersFieldNumber;
const int Items::kPackagesFieldNumber;
const int Items::kParametersFieldNumber;
const int Items::kItemsFieldNumber;
#endif  // !_MSC_VER

Items::Items()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Items::InitAsDefaultInstance() {
}

Items::Items(const Items& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Items::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Items::~Items() {
  SharedDtor();
}

void Items::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Items::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Items& Items::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_message_5fconteiner_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_message_5fconteiner_2eproto();
#endif
  return *default_instance_;
}

Items* Items::default_instance_ = NULL;

Items* Items::New() const {
  return new Items;
}

void Items::Clear() {
  groups_.Clear();
  users_.Clear();
  packages_.Clear();
  parameters_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Items::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .groups.Group groups = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_groups;
        if (input->ExpectTag(18)) goto parse_users;
        break;
      }

      // repeated .user.UserBasicInformation users = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_users;
        if (input->ExpectTag(26)) goto parse_packages;
        break;
      }

      // repeated .package.Package packages = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_packages;
        if (input->ExpectTag(34)) goto parse_parameters;
        break;
      }

      // repeated .parameters.Parameter parameters = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parameters;
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .item.Item items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Items::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .groups.Group groups = 1;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->groups(i), output);
  }

  // repeated .user.UserBasicInformation users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->users(i), output);
  }

  // repeated .package.Package packages = 3;
  for (int i = 0; i < this->packages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->packages(i), output);
  }

  // repeated .parameters.Parameter parameters = 4;
  for (int i = 0; i < this->parameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->parameters(i), output);
  }

  // repeated .item.Item items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->items(i), output);
  }

}

int Items::ByteSize() const {
  int total_size = 0;

  // repeated .groups.Group groups = 1;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  // repeated .user.UserBasicInformation users = 2;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  // repeated .package.Package packages = 3;
  total_size += 1 * this->packages_size();
  for (int i = 0; i < this->packages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packages(i));
  }

  // repeated .parameters.Parameter parameters = 4;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameters(i));
  }

  // repeated .item.Item items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Items::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Items*>(&from));
}

void Items::MergeFrom(const Items& from) {
  GOOGLE_CHECK_NE(&from, this);
  groups_.MergeFrom(from.groups_);
  users_.MergeFrom(from.users_);
  packages_.MergeFrom(from.packages_);
  parameters_.MergeFrom(from.parameters_);
  items_.MergeFrom(from.items_);
}

void Items::CopyFrom(const Items& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Items::IsInitialized() const {

  for (int i = 0; i < groups_size(); i++) {
    if (!this->groups(i).IsInitialized()) return false;
  }
  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  for (int i = 0; i < packages_size(); i++) {
    if (!this->packages(i).IsInitialized()) return false;
  }
  for (int i = 0; i < parameters_size(); i++) {
    if (!this->parameters(i).IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void Items::Swap(Items* other) {
  if (other != this) {
    groups_.Swap(&other->groups_);
    users_.Swap(&other->users_);
    packages_.Swap(&other->packages_);
    parameters_.Swap(&other->parameters_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Items::GetTypeName() const {
  return "container.Items";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace container

// @@protoc_insertion_point(global_scope)
